
1.获取类的Field
    1.1-Field 类.gatField();
       -Field[] 类.gatFields();
        *这两个方法可也获得类中的属性，只能获得公开属性
        *然后通过 String Field.getName();
        *获得属性的名字

       -使用Field[] 类.gatDeclaredFields();
        *获取所有的Field

       -Class field名.getType();
        *获得field的属性类
        * 在通过 类.getNae() 或者 类.setSimpleName() 获得属性的名字。

       -int Field名.getModifiers();
        *此方法获得的是修饰符的代号；
       -String Modifier.toString("代号")；
        *可以根据代号获得修饰符的字符串

    1.2 通过这些方法，就可以反编译出类文件中的属性并显示

2.回顾字符串的拼接：
    -StringBuilder
        a.append("");

3.通过反射机制访问对象属性

4.可变长度参数
    4.1在参数列表里写(属性... args)
        -可变参数必须是最后一个，有且只有一个

    4.2可变参数可以看作一个数组，由length属性
        -因此在可变参数处可以传一个数组

5.反射机制方法
    5.1 Method[] Class.getDeclareMethod();
        *获得方法

    5.2 int method.getModifiers();
        //调用静态方法
        String Modifier.toString(method.getModifiers());
        *获得方法的修饰符

    5.3 Object method.getReturnType();
        String method.getReturnType().getSimpleName();
        *获得方法的类

    5.4 String method.getName();

    5.5重点：通过反射机制的调用对象的方法
        方法的调用涉及4个要素
        -方法
        -obj对象
        -"" "" 实参
        -reValue 返回值

    5.6反射机制让代码增加通用性，以后只要修改配置文件就可以改变效果

    5.7通过反射机制创建对象
        -通过反射机制获得构造方法
            * Class.getDeclaredConstructor(“这里可以有参数也可以无参数” String.class,int.class);
        -然后通过newInstance()；创建对象

    5.8 反射机制也可以获取父类和实现接口
        * getSuperClass();
        * getInstanceof();

6.注解
    6.1 注解，或者叫做注释 英文的单词是：Annotation

    6.2 注解Annotation是一种引用数据类型，编译后生成class文件

    6.3如何自定义注解：
        [修饰符列表] @interface 注解类类型名{

        }

    6.4 注解如何使用，用子什么地方？

        第一：注解使用时的依法格式是：
            @注解类型名

        第二：注解可以出现在类上，属性上，方法上，变量上。。。
        注解还可以出现在注解上

    6.5 java准备的注解，@override
       -@override只能修饰方法
       -@override这个注解是给编译器参考的，与运行阶段没有关系
       -凡是被@override修饰的方法。编译器都会进行编译检查，是否这个方法是重写父类的方法

    6.6掌握了解java.lang包下的注解
        Deprecated 用 @Deprecated 注释的程序元素
        不鼓励程序员使用这样的元素，通常是因为很危险或存在更好的选择

        Override表示一个方法声明重写超类方法中的另一个方法声明。

    6.7元注解
        -什么是元注解？
            用来标注“注解类型”的“注解”，称为元注解

        -常见的元注解有哪些？
            Target
            Retention

        -关于 Target 注解：
            只是一个元注解，用来标注“注解类型”的“注解”
            这个Target标注注解，用来标识“被标注注解”可以出现的位置

            @Target(ElementType.METHOD)：表示被标注的注解只能出现在方法上

        -关于 Retention 注解：
            这是一个元注解，用来标注“注解类型”的“注解”
            这个 Retention 注解用来标注“被标注注解”最终保存在哪里

            @Retention(RetentionPolicy.SOURCE)：该注解只被保存在java文件中
            @Retention(RetentionPolicy.CLASS)：该注解保存在CLASS文件中
            @Retention(RetentionPolicy.RUNTIME)：该注解保存在CLASS文件中，可以被反射机制读取到

        -自定义注解中有属性，添加注解的时候需要在括号只给属性添加内容

        -当注解的属性名是value的时候，属性名可以不写

        -注解中的属性类型：
            *可以是：基本数据类型，数组
            *如果属性类型是数组，当只有一个元素的时候，{}可以省略
            *属性后有 （defaul 数据） 指默认值是。。。

    6.8通过反射机制获取注解
        -Class.isAnnotationPresent(Annotation.class);
            *判断该类是否有Annotation注解

        -Class.getAnnotation(Annotation.class);
            *返回相应的注解类

    6.9注解的作用
        -注解的相关内容可以是注解标注内容的相关说明
            *比如注解中有ID数据，可以通过反射机制判断使用中是否有这个数据添加
            *如果没有就报错
        -用于对相应程序的测试添加备注

