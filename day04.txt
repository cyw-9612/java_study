1.控制语句

	*选择结构
	- if,if else
		1.if语句的语法结构：四种编写方式
			第一种：
				if(布尔表达式){
					java语句；
					java语句；
					java语句；
					java语句；
					.....
				}
			第二种：
				if(布尔表达式){
					java语句；
					java语句；
					.....
				}else{
					java语句；
					java语句；
					.....
				}
			第三种：
				if(布尔表达式){
					java语句；
					java语句；
					.....
				}else if(布尔表达式){
					java语句；
					java语句；
					.....
				}else if(布尔表达式){
					java语句；
					java语句；
					.....
				}else if(布尔表达式){
					java语句；
					java语句；
					.....
				}
			第四种：
				if(布尔表达式){
					java语句；
					java语句；
					.....
				}else if(布尔表达式){
					java语句；
					java语句；
					.....
				}else if(布尔表达式){
					java语句；
					java语句；
					.....
				}else{
					java语句；
					java语句；
					.....
				}
		2.重点，if语句有一个分支执行了，整个语句就结束了
		3.注意，1种的第二种和第四种的编写方式带else分支，则这两种方式100%会有分支被执行
		4.所有控制语句都可以嵌套使用。只要合理就行。
		5.if语句中只有一行java语句，大括号可以省略

	- switch
		1.switch语句属于选择结构，也是分支语句
		2.switch语句的语法结构
			switch(int或string类的字面值或变量){
				case int或string类的字面值或变量:
					java语句；
					....
					break;
				case int或string类的字面值或变量:
					java语句；
					....
					break;
				case int或string类的字面值或变量:
					java语句；
					....
					break;
				case int或string类的字面值或变量:
					java语句；
					....
					break;
				.......
				default :
					java语句；
					....
			}
		3.switch语句的执行原理
			switch括号中的数据与case后的选项依次匹配
		4.匹配成功的分支语句执行，分支有break,switch终止
		5.分支没有break，继续执行下面的分支，且不需要case匹配，这类现象称为穿透现象
		6.如果所有case语句都没有匹配，则执行defaul分支
		7.switch和case后面的类型只有int和string
			*byte，short，char也能放入，但会强制类型转换
			*JDK6 只能识别int
			*JDK7及以上就可以识别int和string
		8.case可以合并
			switch(1){
				case 1 :case 2 : case 3:
					java语句；
			}

	*循环结构
	针对程序中需要循环使用的/反复执行的语句，可以使用循环结构，避免重复编写
	- for
		语法结构：
			for(初始结构;布尔表达式;更新表达式){
				//需要重复执行的语句
			}
		for循环语句的执行原理
			1.初始结构，布尔表达式，更新表达式都不是必须的【但是两个分号是必须的】
			2.初始结构表达式最先执行，且只执行依次
			3.布尔表达式结果必须是true/false,不能是其他值
			4.for循环一句的执行过程：
				*执行初始结构表达式
				*判断布尔表达式
					-true
						*执行循环体
						*执行更新表达式
						*判断布尔表达式
					-false
						*循环结束
				*善用for和for的嵌套，for和if的嵌套
				*内层循环中的变量名和外层变量中的变量名不能重复。

	- while
		1.while循环语句的语法结构
			while(布尔表达式){
				循环体语句；
			}
		2.while循环的执行原理
			*true
				-执行循环体
					*判断布尔表达式
			*false
				-推出循环

	- do...while
		1.do..while循环的语法结构
			do{
				循环体；
			}while(布尔表达式)；
		2.do..while循环的执行原理	
		3.do..while循环的执行次数
			第一次必定执行，执行次数为1+N
		4.do..while循环的的注意事项：
			do...while循环语句最终有一个“分号”！

	*控制结构
	- break
		1.break是Java语言中的关键字，翻译为“中断/折断”
		2.break + ";" 可以成为单独完整的语句
		3.break用于switch语句中可以终止switch语句
		4.break语句同样用于循环语句中。用来终止循环的执行
		5.break;语句用于for，while，do...while语句中填出循环，终止循环的执行。
		因为当程序循环达到某个条件时，后续循环没有必要执行，这样跳出可以增加执行效率。
		6.默认状态下，break终止的是最近的循环语句
			技巧：给中断取名
			for1:for(;;){
				for2:for(;;){
					if(){
						break for1; //条件满足直接中断for1循环
					}
				}
			}

	- continue
		1.continue表示：继续/go on/下一个
		2.continue也是关键字，加":"表示完整语句
		3.continue和break的区别：
			*break表示循环不再执行，跳出循环。终止循环。
			*continue便是终止当前“本次”的循环体，直接进入下一次循环
		4.continue也可以使用：
		 continue 循环名称；