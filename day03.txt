1.关于java语言中整数型
	数据类型	占用空间大小	默认值	取值范围
------------------------------------------------------------------
	byte		1				0 		-128~127
	short		2				0 		-32768~32767
	int			4				0 		-2147483648~2147483647
	long		8				0L 	

2.java语言中的整数型字面值被默认当作int类处理。
	因此在对较大数据的处理时候要设置类型：类如 long x = 2147483648L；
3.java语言中的整数型字面值有三种表示方式：
	第一种：十进制【是一种缺省默认的方式】
	第二种；八进制【在编写八进制整数型字面值的时候需要以0开始】
	第三种：十六进制【在编写十六进制整数型字面值的时候要以0x开始】
4.当一个整数字面值没有超过类型（byte，short，char）的范围，可以直接转换类型赋值，方便编程

5.关于浮点型主句类型
	float单精度【4个字节】
	double双精度【8个字节】

	double精度太低【相对来说】，不适合财务软件。
	财务涉及到金钱，要求精度高，所以在SUN的基础库中
	准备了精度更高的类型，只是这种类型类一种引用数据类型
	不属于基本数据类型，它是：java.math.BigDecimal

	java程序中SUN提供了一套庞大的类库，程序员可以基于这套类库库进行开发。所以要指导java的SE类库在哪，java的SE类库的字节码在哪。在知道java的SE类库的源代码在哪。
		*SE类库字节码：C:\Program Files\Java\jdk1.8.0_171\jre\lib\rt.jar
		*SE类库源码：C:\Program Files\Java\jdk1.8.0_171\src.zip

	例如String.java和String.class
	我们的（String[] args）中的String使用的就是String.class字节码的文件

	在java语言中，所有浮点型字面值【3.0】，默认被当作double类型处理
	要想该字面值被当作float类型处理，要在字面值后面添加F/f

	注意：
		double和float在计算机中的存贮都是近似值

6.关于java中布尔型数据leix
	boolean

	在Java语言中boolean类型只有两个值：true 和 false 没有其他值。
	不像C语言中可以用0和1编制真假

	低层存储的之后boolean类型只占1个字节，因为实际存储的时候false底层是0，true底层是1

	布尔类型用于逻辑判断段和条件控制语句

7.关于数据类型的相互转换
	1。八种数据类型除了布尔型都可以相互转换
	2.小容量向大容量转换，称为自动类型转换。容量从小到大：
		byte < short < int < long < float < double < char < 
		注意：任何浮点型数据都比整数型大
	3.大容量转为小容量需要强制类型转换，会损失精度
	4.当字面值没有超过byte,short,char的取值范围i，可以直接赋值
	5.byte,short,char混合运算时，各自先转换成int类型在运输
	6.多种类型混合运算时候前转换成最大的类型再运算

8.运算符
	*算数运算符
	*关系运算符
	*逻辑运算符
	*赋值类运算符
	*字符串连续运算符
	*三元运算符

	1.关于java算数运算符
		+		求和
		-		相减
		*		乘积
		/		商
		%		取模【求余数】
		++		自加一
		--		自减一

		注意一个表达式中多个运算符，运算有优先级，加括号增加优先级

	2.关系运算符
		>		大于
		>=		大于等于
		<		小于
		<=		小于等于
		==		等于
		!=		不等于

		注意：= 是赋值运算符
			== 是关系运算符
		关系运算符的运算结果一定是布尔型的：true / false

		关系运算符的运算原理：
			比较的是双方变量保存多大值

	3.逻辑运算符  //OperatorTest02
		&		逻辑与 （并且）【两边都为true时才为true】
		|		逻辑或 （或者）【两边只要有一个true，就为true】
		!		逻辑非 【取反，！false就是true，！true就是false】
		^		逻辑异或 【两边算子只要不一样，结果就是true】
		&&		短路与	
		||		逻辑或

		*逻辑运算符要求两边算子都是布尔型的，并且结果也是布尔型
		*短路与与逻辑与结果相同，只是短路与有短路现象
		*短路或与逻辑或结果相同，只是短路或有短路现象、
		*了解什么时候发生短路
		*什么时候选择短路运算，什么时候选择逻辑运算

		逻辑与和短路与
			*由于后面的表达式可能不执行，一次短路与/或更智能
			运算效率更高
			*但是在某些特殊算术中，要求两边算子必须全部运算，这时使用逻辑与/或
			*第一个为false短路与短路。第一个为true短路或短路

	4.赋值运算符
		赋值类运算符有两类：
		*基本的赋值运算符
			=

		*扩展的赋值运算符
			+=
			-=
			*=
			/=
			%=

		*赋值运算的优先级：先运算右边，在赋值
		*扩展类的赋值运算符不改变运算结果的类型。

	5.字符串连接运算符
		关于java语言中的“+”运算符
		1.+运算符有两个作用
			*加法运算，求和
			*字符串的连接运算

		2.当+运算符两边都是数字时。一定时加法运算
		3.当+运算符两边只要有一个时字符串，就一定会进行字符串连接运算，并且，连接运算后结果还是一个字符串类型。
		4.在一个表达式中出现多个“+”，在没有出现小括号的时候从左向右依次计算。
		5.引用类型String
			String是SUN在javaSE中提供的字符串类型
			String.class字节码文件

	
	6.三目运算符/三元运算符
		1.语法规则
			布尔表达式 ？ 表达式1 : 表达式2

		2.三元运算符的执行原理
			当布尔表达式为true，表达式1作为全表达式的结果。
			当布尔表达式为false，表达式2作为全表达式的结果。