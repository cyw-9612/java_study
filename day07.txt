
1.构造函数（构造方法/构造器）
	关于java类的构造方法
  	
  	1.构造方法又被称为构造函数，构造器

  	2.构造方法语法结构：
  		[修饰符列表] 构造方法名(形式参数列表){
  			构造方法体;
  		}

  	3.对于构造方法来说，返回值类型不需要指定，也不能写void
  	只要加void就成了普通方法

  	4.對於構造方法的方法名來説，构造方法的方法名要与类名相同
  	
  	5.构造方法的作用
  		通过构造方法的调用，可以创建对象。
  	
  	6.构造方法如何调用
  		-普通方法的调用：方法修饰符中有static的时候：类名.方法名（实参列表）; 没有static的时候：引用.方法名（实参列表）；
  		-new 构造方法名（实参列表）；

  	7.每个构造方法执行结束后都有返回值，但是这个返回值不用“return”语句执行。它会自动返回构造方法所在类的类型。

  	8.注释和取消注释快捷键： Ctrl + /
  		多行注释：选中 Ctrl + Shift + /

  	9.当一个类中没有定义构造方法的时候，系统会默认提供一个无参数构造方法，这个构造方法被称为缺省构造方法

  	11.当一个类显示的提供了一个构造方法的时候，系统将不再提供一个默认缺省构造方法

 2.对象和引用

 	2.1对象和引用的概念
 		*对象：目前在使用new运算符在堆内存中开辟的内存空间称为对象
 		*引用：只是一个变量
 		*所有访问实例相关的数据，都需要通过”引用.“的方式访问。

 	2.2参数的传递
 		主要研究方法在调用的时候，涉及到参数传递。那参数到底是如何传递的呢
 		*传递的是变量里面的值，无论这个值是代表什么意思

 3.this关键字
 	3.1 this是一个关键字，翻译为 “这个”

 	3.2 this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this版存在堆内存中java对象内

 	3.3每个对象都有自己的this

 	3.4 this可以用在“实例方法”当中，this只想当前正在执行这个动作的对象

 	3.5 this一般可以省略

 	3.6 this不能用在带static的方法中

 	3.7没有static修饰的方法，要使用一定要先创建对象，才能通过这个对象调用。
 		*因此在带static的方法中不能“直接”访问实例变量和实例方法
 		*因为实例变量和实实例方法都需要对象的存在

 	3.8 this用来区分局部变量和实例变量的时候不能省略。
 		-例如setter函数中，对局部变量来说，为了辨识，会取和实例变量名相同的名字，这时用this.变量名区分

 	3.9 this的使用范围
 		1.可以使用实例方法中。代表当前对象【this.】
 		2.可以使用在构造方法中，通过当前的构造方法调用其他的构造方法【语法格式：this(实参列表)；】

 		重点：this()这种语法只能出现在构造函数的第一行

 	3.10 对于空指针异常是指通过空的指针去访问对象数据。因此在使用空指针访问static方法的时候则只会警告，不会报错，因为那个指针被自动替换成类名了

 4.关于java语法中的static关键字
 	4.1static英语单词翻译为静态的
 	4.2static修饰的方法是静态方法
 	4.3static修饰的变量是静态变量
 	4.4所有static修饰的元素称为静态元素，都可以用（类名. ）的方式访问。当然，也可以用（引用. ）的方式访问【但不建议】

 5.static关键字
 	可以使用static关键字来定义“静态代码块”
 	1.语法格式
 		static{
 			java语句；
 		} 
 	2.静态代码块旨在类加载的时候执行，切只执行一次
 	
 	3.静态代码块在一个类中可以编写多个，且自上而下的一次执行
 
 	4.静态代码块的作用是什么？怎么用？什么时候用？
 		-与具体需求有关：例如项目要求在类加载的时候完成日志记录，
 		那么静态代码块就可以编写记录日志的代码
 
 		-静态代码块是java为程序员准备的一个特殊时刻，这个特殊时刻就是类加载的时刻。
 		当需要在这一 时刻进行的操作可以放在静态代码块中。

 	5.通常在静态代码块中完成初始化操作或预备工作。例如：初始化连接池，解析XML配置文件

 	6.了解知识：实例的代码块
 		{
 			java语句块；
 		}

 		*实例代码块可以编写多个，自上而下依次执行
 		
 		*实例代码块在构造方法执行前执行。构造函数执行一次，实例代码块执行一次。

 		*实例代码块是java语言为程序员准备的一个特殊时期：对象初始化时期

 6.关于java语言中的继承
 	6.1继承是面向对象三大特征之一：封装，继承，多态

 	6.2继承“基本”的作用是：代码复用。但是继承最“重要”的作用是：有了继承才有了以后“方法的覆盖”和“多态机制”。

 	6.3继承的语法结构：
 		[修饰符列表] class 类名 extends 父类名{
 			类体 = 属性 + 方法
 		}

 	6.4java语言中的继承只支持单继承，一个类不能同时继承多个类。在C++中支持多继承。

 	6.5关于继承的一些术语：
 		B类继承A类，其中：
 			A类称为：父类，基类，超类，superclass
 			B类称为：子类，派生类，subclass

 	6.6在java语言中那些数据可以继承：
 		-私有的不能继承
 		-构造方法不支持继承
 		-其他数据都可以继承

 	6.7虽然java语言总只支持单继承，答案是一个类可以简介继承其他类。

 	6.8在java语言中假设一个类没有显示继承任何类，则该类默认继承JavaSE库中的java.lang.Object类

 7.快捷键补充
 	*查找类型【Open Type】 --> ctrl + shift + t
 	*查找资源【Open Resource】 --> ctrl + shift + r

 8.方法的覆盖
 	8.1回顾java语言中的方法的重载：
 		*方法重载称为Overload
 		*方法重载使用的地方：
 			当一个类当中，方法完成的功能是相似的，建议方法名相同，方便编程。
 		*方法重载需要满足的条件
 			-在同一个类中
 			-方法名相同
 			-参数列表不同：类型，顺序，个数
 		*方法重载和什么无关
 			-和方法的类型无关
 			-和方法的返回值无关

 	8.2关于java语言中的方法覆盖：
 		*方法覆盖又称为方法覆写，英文单词：Overwrite

 		*什么时候使用方法覆写？
 			-当父类中继承的方法无法满足当前需求的时候
 			-需要重新编写的过程称为方法重写/方法覆盖。

 		*什么条件满足会发生方法覆写？
 			-方法覆盖发生在具有继承的父子类之间
 			-返回值类型相同，方法名相同，形成列表相同
 			-访问权限不能更低，可以更高（private-->public）
 			-抛出异常不能更多，可以更少

 		*建议方法覆写的时候尽量复制黏贴，减少重新编写的内容。

