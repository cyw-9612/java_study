
1.抽象类

    1.什么是抽象类
        类和类之间具有的共同特征，将这些共同特征提取出来，形成的就是抽象类
        类本身不存在，所以抽象类无法创建对象

    2.抽象类属于什么类型？
        抽象类也属于引用数据类型

    3.抽象类怎么定义？
        语法
            [修饰符列表] abstract class 类名{
                类体
            }

    4.抽象类无法实例化对象，所以抽象类使用了被子类继承的

    5.final和abstract不能同时出现

    6.抽象类的子体可以是抽象类

    7.抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是贡子类使用的

    8.抽象类关联到一个概念：抽象方法
        抽象方法表示一个没有实现的方法，没有方法体的方法
        例如： public abstract void doSome();
        抽象方法的特点是：
            特点一：没有方法体，以分号结尾
            特点二：前面修饰符列表中有abstract关键字

    9.抽象类中不一定由抽象方法，但抽象方法必须出现在抽象类中

    10.重要结论！！：
        一个非抽象类继承一个抽象类，必须将抽象类中的抽象方法重写
        这是java语句规定的

    11.问题：判断，java语言中凡是没有方法体的方法都是抽象方法。
            不对
            object类中就有许多方法都没有方法体

2.接口
    1.接口的基础语法

        *接口也是一种引用数据类型,编译后生成class

        *接口是完全抽象的（抽象类是半抽象的）

        *接口怎么定义：
            [修饰符列表] interface 接口名()

        *接口支持多继承，一个接口可以继承多个接口

        *接口中只包含两部分，常量，抽象方法

        *接口中所有元素都是public修饰的

        *接口定义抽象方法的时候，public abstract可以省略

        *接口中的方法都是抽象方法，所以接口中没有方法体

        *接口中的常量，public static final也可以省略，因为接口中的必定是常量（不能修改）

        *类和类之间叫做继承，类和接口之间叫做实现
            -这个“实现”其实就是继承
            -继承用 extends 关键字
            -实现用 implements 关键字

        *重点！！！：
            -当一个非抽象类实现一个接口的时候，必须将所有抽象方法实现（覆写，重写）。

        *当extends和implements同时存在的时候先写继承再写实现

    2.接口在开发中的作用
        *重点！！！：
            -接口和接口之间可以多继承，类和接口之间也可以多实现
            -一个类可以实现多个接口

        *这种机制弥补了类之间只支持单继承的缺陷

        *经过测试不同类型的接口之间可以强制类型转换
            -但是在运行阶段可能会出现ClassCastException错误
            -对于类之间的强制类型转换，没有关系则不行
            -提醒：对于类的强制转型（向下转型）一定要先用 instanceof 进行判断

        *接口在编程重点作用类似于多态，
            -多态作用：面向抽象对象编程，减少程序耦合度，提高扩展性

        *接口是完全抽象的，所有面向抽象对象编程可以理解为面向接口编程
            -接口可插拔，程序扩展力强，解耦合解的是调用者和执行者之间的耦合

3.类与类之间的关系总结
    *所有类之间的关系基本有 A is B (继承)； A has a B (关联)； A like a B (实现)
    3.1 is a
        Cat is a Animal
        这里用继承
        A extends B

    3.2 has a
        I hava a apple
        这里是关联属性，apple是I的一个属性
        A{
            B b；
        }

    3.3 like a
        Coofe like a FoodMenu（厨师像一个菜单）
        实现关系通常是：类实现接口
        A implements B

4.抽象类和接口的区别

    *抽象类是半抽象的
    *接口是完全抽象的

    *抽象类中有构造方法
    *接口中没有构造方法

    *接口和接口之间可以多继承
    *类和类之间只能单继承

    *一个类可以同时实现多个接口
    *一个抽象类只能继承一个类，单继承

    *接口中只允许出现常量和抽象方法

    *接口使用的比抽象类多

    *接口一般都是对“行为”的描述

5.简单回顾packsge机制和import关键字
    5.1 package 关键字只能出现在开头，且之能声明一次
        *编译：
            javac -d . *.java
            解释：
                -d 带包编译
                . 表示编译后生成的放在当前目录下

        *运行：
            java com.daidu.javase.day10.HelloWorld （完整类名）

        *完整的类名要带包名

    5.2 import 关键字：
            当A类调用B类的时候：
            *当A类与B类在同一个包下：不需要import声明
            *当A类与B类不在同一个包下：需要用import声明调用B类的包名.类名
                -import 包名.* 表示加如该包所有的class类
            *java.lang 包下的不需要导入，不如String，Sytem可以直接用

    5.3回顾之前的输入获取语句
        -java.util.Scanner s = new java.util.Scanner(System.in);
        -这里的 java.util 就是 Scanner 的包名
        -如果在开始声明：import java.util.Scanner;
        -则以可省略  java.util

6.回顾控制访问权限
    6.1访问控制权限有四个：
        private     私有
        public      公开
        protect     受保护
        默认

    6.2以上四个访问控制权限是控制范围：
        private ： 只能本类访问
        public  ： 可以在任何位置访问
        “默认”   ： 只能在本类，以及同包下访问
        protect ： 只能在本类，同包，子类中访问

7.JDK类库的根类： Object
    7.1 这个Object类是所有类的祖宗，所有类都是默认继承于它

    7.2 Object类中有哪些常用方法，去哪里找呢？
        *方法一：可以去源代码找 JDK\lib\src\java.base\lang\Object.java
        *方法二：查阅帮助文档

        *什么是API
            -应用程序编程接口 （Application Program Interface）
            -整个JDK的类库就是一个javase的API
            -每个API都会配置一套API帮助文档

        *javadoc 命令可以生成帮助文档

        *事先了解的常用方法：
            protected Object clone()    //负责对象克隆
            int hashCode()              //获得对象哈希码的方法
            boolean equals(Object obj)  //判断两个对象是否相等
            String toString()           //将对象转换成字符串形式
            protected void finalize()   //垃圾回收器负责调用的方法

8.关于Object 中的 toString 方法
    8.1 toString() 方法是什么樣子的
     public String toString(){
        return this.getClass().getName() + "@" +Integer.toHexString(hashCode());
     }
     源代码上toString（）方法的默认实现是：
        类名@对象的内存地址转换成十六进制的形式

    8.2 SUN设置toString（）方法的目的
       -通过调用将一个对象转换成字符串的形式

    8.3 API中建议每一个子类都应该去重新这个方法，
        使得结果简洁，详实，易阅读。
        使得结果简洁，详实，易阅读。

    8.4 输出类的时候，会默认调用和toString()

9.关于Object 中的 equals 方法
    9.1 equals 方法的源代码
        public boolean equals(Object obj){
            return (this == obj);
        }
        -以上这个方法是Object类的默认实现
        -在Object类中的equals方法使用"=="进行判断的

    9.2设计equals方法的目的
        以后编程过程中通过equals方法来判断两个对象是否相等

    9.3在Object类中的equals方法使用"=="进行判断的
        但是==判断的只是两个对象的地址
        因此在使用中需要根据实际情况重写equals方法

10.探究java语言中的字符串String有没有重写toString()方法和equals()方法
     *实际上String也是一个类
     *他也有构造方法
     *因此比较字符串需要调用equals方法
     *String类已经重写了equals
     *String类也重写了toString方法
     *直接调用引用，是默认调用引用.toString
     *所以我们可使用 System.out.println(a1);

     注意：
     -所以除了基本数据类型可以使用 == 判读相等
     -其他所有引用数据都要用equals判断相等

11.关于 Object 中的 finalize 方法   （不太常用）
    1.在关于Object 中的 finalize() 方法源代码
        protectde void finalize() throw Throwable{ }

    2.finalize（）方法只有一个方法体，里面没有代码，且方法是protected修饰的

    3.这个方法不需要程序员手动调用，JVN的垃圾回收器负责自动调用

    4.finalize() 方法的指向时机：
        当一个java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用这个方法

    5.finalize() 方法是SUN公司为程序员准备的一个时机，
        当需要在对象销毁实际执行一段代码的话，这段代码就写入finalize方法体中
        （参考静态代码块，当类加载的时机）

    6.JVM中的垃圾回收器启动有条件
        -时间太短
        -垃圾太少
        -等等都不一定会启动

    7.建议启动垃圾回收器的语句
        System.gc(); //只是建议，不一定启动

12.关于 Object 中的 hashCode() 方法
    public native int hashCode();
    这个方法不是一个抽象方法，带有native关键字，底层调用c++程序

    *hashCode(); 方法返回的是哈希码：
        实际上是一个java对象的内存地址通过哈希算法，得出的值
        可以等同看作内存地址