
1.方法初步
	*方法的基础语法
		1方法怎么定义

		[修饰符列表] 返回值类型 方法名（形式参数列表）{
			方法体
		}

		2.对以上的语法结构进行解释说明：
			2.1
			*可选项，不是必须的
			*目前统一写成：public static
			*方法的修饰符列表当中有static关键字的话，怎么调用
				-类名.方法名（实际参数列表）;

			2.2
			*什么是返回值？
				一个方法是可以完成某个特定功能发买这个功能结束后大多需要一个可返回的最终结果，执行结果可以是一个具体数据，这个数据就是返回值。
			*返回值类型
				返回值是一个具体存在的数据，数据都是有类型的，此处需要指定返回值的具体类型
			*返回值的类型可以指定java的任意类型，包括基本数据类型和引用数据类型
			*也可能方法执行结束后没有返回值，这里用void定义方法类型。
			*方法返回值类型若不是void，表示方法结束后必须有一个具体的数据，否则报错。采用"return 数据;"，这里要求数据的类型必须与方法的定义相同
			*当返回值的类型是void时，方法不能"return 数据"语句，但是可以有"return;"。
			*只要带有return关键字的语句执行，return语句所在的方法结束。

			2.3方法名
			*只要是合法的标识符就行
			*方法名最好见名知意
			*方法名最好是动词
			*方法名首字母要求小写，后面每个单词首字母大写

			2.4形式参数列表：简称形参
			*形参是局部变量，int a ,double b,float c.....
			*形参的个数可以是：0~N个
			*多个形参之间用逗号隔开
			*形参中起决定性作用的是形参的数据类型，形参的名字就是局部变量的名字
			*方法在调用的时候，实际就是给方法传递真实数据，称为实际参数。
			*实参列表和形参列表
				-数量相同
				-类型对应相同

			2.5方法体必须由大括号括起来，方法体中的代码顺序执行。由java语句构成，每句以;结尾。

		3.方法怎么调用
			方法只定义不调用就不会执行。只有在调用的时候才会执行。
			语法规则：《方法的修饰符列表中由static》
				类名.方法名（实参列表）;

			方法的修饰符列表中有static关键字，有时在同类中的调用可以省略类名
		4.深入return语句
			*都带有return关键字的java语句只要执行，则方法执行结束

			*在“同一个作用域中”，return语句之后不能编写任何代码，因为他们永远不会执行，编译会报错。

			*"return;" 也可以在main方法中使用

	*方法的内存分配
		1.方法只定义，不调用，是不会执行的，并且在JVM中也不会给方法分配“运行所属”的内存空间
		2.在JVM 的内存划分上有这样三块主要的内存空间
			*方法区内存
			*堆内存
			*栈内存

		3.关于栈数据结构
			*栈：stack，是一种数据结构
			*数据结构反应的是数据的存储形态
			*数据结构是独立的学科，不属于编程语言范畴
			*精通数据结构和算法
			*java开发可以不精通数结构，因为javaSE中的集合有事先准备好的大量数据结构
			*常见的数据结构
				-数组
				-队列
				-栈
				-链表
				-二叉树
				-哈希表/散列表
				。。。。。

		4.方法代码片段存在哪？方法执行的时候执行过程的内存在哪里分配？
			*方法的代码片段属于.class字节码文件的一部分，字节码在类加载的时候，将其放到方法区内存中，所以JVM中的三块主要内存空间中方法区内存现有数据。存放代码片段。
			*代码片段虽然在方法区内存中只有一份，但可以被反复调用。每次调用都需要给方法分配独立活动场所，在栈内存中分配。

		5.方法在调用的时候在栈内存中分配独立内存空间，会在栈中发生压栈动作（push），方法执行结束后，会将方法分配的内存空间释放，此时发生弹栈动作（pop）。

		6.局部变量在栈中存储，局部变量在运行阶段内存在栈中分配。

	*方法的重载机制
		1.什么时候考虑使用方法重载
			功能相似的时候，方法名可以相同，这就是重载。但是功能不同的时候，尽量让方法名不同
		2.什么条件满足后构成方法重载
			*在同一个类当中
			*方法名相同
			*参数列表不同
			 -数量不同
			 -顺序不同
			 -类型不同
		3.方法重载和什么有关和什么无关？
			*方法重载和方法名+参数列表有关
			*和返回类型无关
			*和修饰符列表无关

	*方法的递归调用
		1.什么是递归
			方法自身调用自身
		2.递归是很耗内存的，递归算法可以不用的时候尽量不用
		3.当出现下面这个错误：
			java.lang.StackOverflowError
			时，这是栈内存溢出错误
			错误发生无法避免，JVM必定停止工作
		4.递归必须要有结束条件，否则必定溢出
		5.递归有了结束条件， 条件正确，也容易发生溢出报错

2.面向对象【java的核心机制，java的特色】
	*面向过程和面向对象的区别
		-面想过程：主要关注点是：实现的具体过程，因果关系
			*优点：对于业务逻辑较为简单的程序，可以达到快速开发前期投入成本较低。
			*缺点采用面向过程的开发方式很难解决非常复杂的业务逻辑。另外，面向过程的开发方式使得软件元素之间的“耦合性”非常高，只要其中之一出问题，整个系统都会受影响。影响程序“扩展力”。由于没有【独立体】概念，无法达到组件的复用。
		-面向对象：主要关注点是：主要关注对象【独立体】能够完成哪些功能。
			*优点：“耦合度”低，扩展力强。更容易解决现实世界当中的复杂的业务逻辑，组件复用性强。
			*缺点：前期投入成本高，需要进行独立体的抽取，大量的系统分析与设计。
		-c语言就是纯面向过程的，c++半面向对象，java纯面向对象
		-现在出现的新的编程语言大多都是面向对象的

	*面向对象的三大特征
		-封装
		-继承
		-多态
		所有面向对象的编程语言都有这三大特征
		
		所有面向对象的开发一个软件，生命周期：【整个周期贯穿使用OO面向对象】
			*面向对象的分析：OOA
			*面向对象的设计：OOD
			*面向对象的编程：OOP

	*类和对象的概念
		*什么是类
			-类在现实世界中是不存在的，是一个模板，是一个概念。是人类大脑抽象思考的结果
			-类代表一类事物
			-在现实世界中，对象A和对象B之间具有共同特征，进行抽象总结出一个模板，这个模板被称为类。

		*什么是对象
			-对象是实际讯在的个体。现实世界中实际存在。

		*描述一下软件开发的过程
			-程序员观察世界，寻找对象
			-寻找N多对象后，发现所有对象都有共同特征
			-形成一个模板【类】
			-通过java代码表述一个类
			-Java程序中有了类的定义
			-通过类就可以创建对象
			-有了对象之后，可以让对象直接协作起来构成系统。

		*类--【实例化】-->对象

		*对象又被称为实例/instance

		*对象--【抽象】-->类

		*重点：
			类的描述是对象的共同特征。
			共同特征例如：身高特征
			这个身高特征在访问的时候，必须先创建对象，通过访问对象去访问这个特征
			因为这个特征具体的某个对象上之后，值不同，

		*一个类主要描述什么信息呢？
			一个类主要描述的是 状态 + 动作。
			状态信息：名字，身高，性别，年龄
			动作信息：吃，唱歌，跳舞，学习

			状态-->类的属性
			动作-->类的方法

		*类{
			属性：描述对象的状态信息
			方法：描述方法的动作信息
		}


	*类的定义【编写代码】
		语法结构：
		 [修饰符列表] class 类名{

		 }

		 学生类，描述所有学生对象的共同共同特征：
		 	学生对象有哪些状态信息：
		 	*学号【int】
		 	*名字【String】
		 	*性别【boolean】
		 	*年龄【int】
		 	*住址【String】
		 	..........

		 	学生对象有哪些动作信息：
		 	*吃饭
		 	*睡觉
		 	*学习
		 	..........

		 重点：属性通常是采用一个变量的形式来完成定义的。
		 	int age;
		 	String name;
		 	String address;
		 	boolean sex;

		 这个类属于引用数据类型！
 